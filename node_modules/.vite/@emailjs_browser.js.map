{
  "version": 3,
  "sources": ["../@emailjs/browser/es/models/EmailJSResponseStatus.js", "../@emailjs/browser/es/utils/createWebStorage/createWebStorage.js", "../@emailjs/browser/es/store/store.js", "../@emailjs/browser/es/utils/buildOptions/buildOptions.js", "../@emailjs/browser/es/methods/init/init.js", "../@emailjs/browser/es/api/sendPost.js", "../@emailjs/browser/es/utils/validateParams/validateParams.js", "../@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js", "../@emailjs/browser/es/utils/isHeadless/isHeadless.js", "../@emailjs/browser/es/errors/headlessError/headlessError.js", "../@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js", "../@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js", "../@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js", "../@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js", "../@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js", "../@emailjs/browser/es/errors/limitRateError/limitRateError.js", "../@emailjs/browser/es/methods/send/send.js", "../@emailjs/browser/es/utils/validateForm/validateForm.js", "../@emailjs/browser/es/methods/sendForm/sendForm.js", "../@emailjs/browser/es/index.js", "dep:@emailjs_browser"],
  "sourcesContent": ["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n", "export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n", "import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n", "export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n", "import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n", "import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n", "export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n", "export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n", "export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n", "import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n", "export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n", "import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n", "import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n", "export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a string';\n    }\n};\n", "import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n", "import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n", "import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.3.3',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n", "export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n", "import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.3.3');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n", "import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n", "import d from \"./node_modules/@emailjs/browser/es/index.js\";export default d;\nexport * from \"./node_modules/@emailjs/browser/es/index.js\""],
  "mappings": "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",
  "names": []
}
